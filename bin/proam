#! /usr/local/bin/python
import glob
import os
from PIL import Image
from PIL.ImageCms import profileToProfile, createProfile, buildTransform, applyTransform
import click

DENSITY = 402
SRGB_TO_FUJI = buildTransform(createProfile("sRGB"), "/Users/ben/Dropbox/bin/Fuji_DP2_ProAm.icm", inMode="RGB", outMode="RGB")

def convert_to_fuji_profile(im):
    return applyTransform(im, SRGB_TO_FUJI)

def save_with_own_profile(im, path):
    im.save(path, icc_profile=im.info['icc_profile'])

def pixels_from_inches(size, density=DENSITY):
    "Always returns portrait size"
    w, h = map(int, sorted(size.lower().split("x")))
    return (w*DENSITY, h*DENSITY)

def make_portrait(im):
    if im.size[0] > im.size[1]:
        return im.rotate(90)
    return im


def proam(path, size):
    im = Image.open(path)
    im = make_portrait(im)
    im.thumbnail(pixels_from_inches(size), Image.ANTIALIAS)
    im = convert_to_fuji_profile(im)
    return im


@click.command()
@click.option('--sizes', default="6x4")
@click.option('--pattern', default="*.jpg")
@click.option('--source', default=".", type=click.Path(exists=True, file_okay=False, dir_okay=True, readable=True, resolve_path=True))
@click.option('--destination', default="proam", type=click.Path(exists=False, file_okay=False, dir_okay=True, writable=True, resolve_path=True))
def run(source, destination, pattern, rotate=True, sizes='6x4'):

    if not os.path.exists(destination):
        os.makedirs(destination)

    sizes = [i.strip() for i in sizes.split(",")]

    for size in sizes:
        sizefolder = os.path.join(destination, size)
        if not os.path.exists(sizefolder):
            os.makedirs(sizefolder)

        filepaths = glob.glob(source+"/"+pattern)
        ims = [proam(i,size) for i in filepaths]
        newpaths = [os.path.join(sizefolder, os.path.basename(i)) for i in filepaths]
        [save_with_own_profile(i, j) for i, j in zip(ims, newpaths)]


if __name__ == '__main__':
    run()
